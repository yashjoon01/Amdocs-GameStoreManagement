-- CREATE STATEMENTS 

-- Users Table
CREATE TABLE Users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password VARCHAR2(50) NOT NULL,
    user_type VARCHAR2(20) CHECK (user_type IN ('customer', 'manager', 'sales_employee')),
    PRIMARY KEY (user_id)
);

-- Games Table with Disc Type
CREATE TABLE Games (
    game_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    title VARCHAR2(100) NOT NULL,
    genre VARCHAR2(50),
    price NUMBER(10, 2),
    stock_quantity NUMBER DEFAULT 0,
    disc_type VARCHAR2(20) DEFAULT 'brand_new' CHECK (disc_type IN ('brand_new', 'second_hand')),
    PRIMARY KEY (game_id)
);

-- Cart Table
CREATE TABLE Cart (
    cart_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id NUMBER,
    game_id NUMBER,
    quantity NUMBER DEFAULT 1,
    PRIMARY KEY (cart_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (game_id) REFERENCES Games(game_id)
);

-- Rentals Table
CREATE TABLE Rentals (
    rental_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id NUMBER,
    game_id NUMBER,
    rental_date DATE DEFAULT SYSDATE,
    return_date DATE,
    PRIMARY KEY (rental_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (game_id) REFERENCES Games(game_id)
);

-- PreBookings Table
CREATE TABLE PreBookings (
    prebooking_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id NUMBER,
    game_id NUMBER,
    booking_date DATE DEFAULT SYSDATE,
    PRIMARY KEY (prebooking_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (game_id) REFERENCES Games(game_id)
);

-- Payments Table
CREATE TABLE Payments (
    payment_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id NUMBER,
    amount NUMBER(10, 2),
    payment_date DATE DEFAULT SYSDATE,
    PRIMARY KEY (payment_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Sales Table
CREATE TABLE Sales (
    sale_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id NUMBER,
    game_id NUMBER,
    sale_date DATE DEFAULT SYSDATE,
    quantity NUMBER DEFAULT 1,
    total_price NUMBER(10, 2),
    PRIMARY KEY (sale_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (game_id) REFERENCES Games(game_id)
);

-- Requests Table
CREATE TABLE Requests (
    request_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id NUMBER,
    game_title VARCHAR2(100),
    request_date DATE DEFAULT SYSDATE,
    status VARCHAR2(20) DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'denied')),
    PRIMARY KEY (request_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);











--INSERTING STATEMENTS 

INSERT INTO Users (username, password, user_type) VALUES ('john_doe', 'password123', 'customer');
INSERT INTO Users (username, password, user_type) VALUES ('jane_smith', 'password456', 'customer');
INSERT INTO Users (username, password, user_type) VALUES ('manager1', 'managerpass', 'manager');
INSERT INTO Users (username, password, user_type) VALUES ('sales1', 'salespass', 'sales_employee');


INSERT INTO Games (title, genre, price, stock_quantity, disc_type) VALUES ('Game A', 'Action', 59.99, 10, 'brand_new');
INSERT INTO Games (title, genre, price, stock_quantity, disc_type) VALUES ('Game B', 'Adventure', 49.99, 5, 'second_hand');
INSERT INTO Games (title, genre, price, stock_quantity, disc_type) VALUES ('Game C', 'Puzzle', 19.99, 20, 'brand_new');
INSERT INTO Games (title, genre, price, stock_quantity, disc_type) VALUES ('Game D', 'RPG', 39.99, 2, 'second_hand');

INSERT INTO Cart (user_id, game_id, quantity) VALUES (1, 1, 2); -- John Doe's cart
INSERT INTO Cart (user_id, game_id, quantity) VALUES (2, 3, 1); -- Jane Smith's cart
INSERT INTO Cart (user_id, game_id, quantity) VALUES (4, 2, 1); -- Sales Employee's cart

INSERT INTO Rentals (user_id, game_id, rental_date, return_date) VALUES (1, 2, SYSDATE, SYSDATE + 7); -- John Doe rents Game B
INSERT INTO Rentals (user_id, game_id, rental_date, return_date) VALUES (2, 4, SYSDATE, SYSDATE + 5); -- Jane Smith rents Game D

INSERT INTO PreBookings (user_id, game_id, booking_date) VALUES (1, 4, SYSDATE); -- John Doe prebooks Game D
INSERT INTO PreBookings (user_id, game_id, booking_date) VALUES (2, 2, SYSDATE); -- Jane Smith prebooks Game B

INSERT INTO Payments (user_id, amount, payment_date) VALUES (1, 19.99, SYSDATE); -- John Doe's payment
INSERT INTO Payments (user_id, amount, payment_date) VALUES (2, 19.99, SYSDATE); -- Jane Smith's payment
INSERT INTO Payments (user_id, amount, payment_date) VALUES (4, 49.99, SYSDATE); -- Sales Employee's payment

INSERT INTO Sales (user_id, game_id, sale_date, quantity, total_price) VALUES (1, 1, SYSDATE, 1, 59.99); -- John Doe buys Game A
INSERT INTO Sales (user_id, game_id, sale_date, quantity, total_price) VALUES (2, 3, SYSDATE, 1, 19.99); -- Jane Smith buys Game C

INSERT INTO Requests (user_id, game_title, request_date, status) VALUES (1, 'New Game E', SYSDATE, 'pending'); -- John Doe requests a new game
INSERT INTO Requests (user_id, game_title, request_date, status) VALUES (2, 'New Game F', SYSDATE, 'pending'); -- Jane Smith requests a new game
INSERT INTO Requests (user_id, game_title, request_date, status) VALUES (4, 'New Game G', SYSDATE, 'pending'); -- Sales Employee requests a new game








--DISPLAYING STATEMENTS 

select * from users;
select * from games;
select * from cart;
select * from rentals;
select * from prebookings;
select * from payments;
select * from sales;
select * from requests;


